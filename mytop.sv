`line 2 "top.tlv" 0 //_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.9-2018/02/11-beta
`include "sp_default.vh" //_\SV
   // This code can be found in: https://github.com/stevehoover/LF-Building-a-RISC-V-CPU-Core/risc-v_shell.tlv
   
   // Included URL: "https://raw.githubusercontent.com/stevehoover/warp-v_includes/1d1023ccf8e7b0a8cf8e8fc4f0a823ebb61008e3/risc-v_defs.tlv"
   // Included URL: "https://raw.githubusercontent.com/stevehoover/LF-Building-a-RISC-V-CPU-Core/main/lib/risc-v_shell_lib.tlv"// Included URL: "https://raw.githubusercontent.com/stevehoover/warp-v_includes/1d1023ccf8e7b0a8cf8e8fc4f0a823ebb61008e3/risc-v_defs.tlv"

   `define READONLY_MEM(ADDR, DATA) logic [31:0] instrs [0:58-1]; assign DATA = instrs[ADDR[$clog2($size(instrs)) + 1 : 2]]; assign instrs = '{{12'b10101, 5'd0, 3'b000, 5'd1, 7'b0010011}, {12'b111, 5'd0, 3'b000, 5'd2, 7'b0010011}, {12'b111111111100, 5'd0, 3'b000, 5'd3, 7'b0010011}, {12'b1011100, 5'd1, 3'b111, 5'd5, 7'b0010011}, {12'b10101, 5'd5, 3'b100, 5'd5, 7'b0010011}, {12'b1011100, 5'd1, 3'b110, 5'd6, 7'b0010011}, {12'b1011100, 5'd6, 3'b100, 5'd6, 7'b0010011}, {12'b111, 5'd1, 3'b000, 5'd7, 7'b0010011}, {12'b11101, 5'd7, 3'b100, 5'd7, 7'b0010011}, {6'b000000, 6'b110, 5'd1, 3'b001, 5'd8, 7'b0010011}, {12'b10101000001, 5'd8, 3'b100, 5'd8, 7'b0010011}, {6'b000000, 6'b10, 5'd1, 3'b101, 5'd9, 7'b0010011}, {12'b100, 5'd9, 3'b100, 5'd9, 7'b0010011}, {7'b0000000, 5'd2, 5'd1, 3'b111, 5'd10, 7'b0110011}, {12'b100, 5'd10, 3'b100, 5'd10, 7'b0010011}, {7'b0000000, 5'd2, 5'd1, 3'b110, 5'd11, 7'b0110011}, {12'b10110, 5'd11, 3'b100, 5'd11, 7'b0010011}, {7'b0000000, 5'd2, 5'd1, 3'b100, 5'd12, 7'b0110011}, {12'b10011, 5'd12, 3'b100, 5'd12, 7'b0010011}, {7'b0000000, 5'd2, 5'd1, 3'b000, 5'd13, 7'b0110011}, {12'b11101, 5'd13, 3'b100, 5'd13, 7'b0010011}, {7'b0100000, 5'd2, 5'd1, 3'b000, 5'd14, 7'b0110011}, {12'b1111, 5'd14, 3'b100, 5'd14, 7'b0010011}, {7'b0000000, 5'd2, 5'd2, 3'b001, 5'd15, 7'b0110011}, {12'b1110000001, 5'd15, 3'b100, 5'd15, 7'b0010011}, {7'b0000000, 5'd2, 5'd1, 3'b101, 5'd16, 7'b0110011}, {12'b1, 5'd16, 3'b100, 5'd16, 7'b0010011}, {7'b0000000, 5'd1, 5'd2, 3'b011, 5'd17, 7'b0110011}, {12'b0, 5'd17, 3'b100, 5'd17, 7'b0010011}, {12'b10101, 5'd2, 3'b011, 5'd18, 7'b0010011}, {12'b0, 5'd18, 3'b100, 5'd18, 7'b0010011}, {20'b00000000000000000000, 5'd19, 7'b0110111}, {12'b1, 5'd19, 3'b100, 5'd19, 7'b0010011}, {6'b010000, 6'b1, 5'd3, 3'b101, 5'd20, 7'b0010011}, {12'b111111111111, 5'd20, 3'b100, 5'd20, 7'b0010011}, {7'b0000000, 5'd1, 5'd3, 3'b010, 5'd21, 7'b0110011}, {12'b0, 5'd21, 3'b100, 5'd21, 7'b0010011}, {12'b1, 5'd3, 3'b010, 5'd22, 7'b0010011}, {12'b0, 5'd22, 3'b100, 5'd22, 7'b0010011}, {7'b0100000, 5'd2, 5'd1, 3'b101, 5'd23, 7'b0110011}, {12'b1, 5'd23, 3'b100, 5'd23, 7'b0010011}, {20'b00000000000000000100, 5'd4, 7'b0010111}, {6'b000000, 6'b111, 5'd4, 3'b101, 5'd24, 7'b0010011}, {12'b10000000, 5'd24, 3'b100, 5'd24, 7'b0010011}, {1'b0, 10'b0000000010, 1'b0, 8'b00000000, 5'd25, 7'b1101111}, {20'b00000000000000000000, 5'd4, 7'b0010111}, {7'b0000000, 5'd4, 5'd25, 3'b100, 5'd25, 7'b0110011}, {12'b1, 5'd25, 3'b100, 5'd25, 7'b0010011}, {12'b10000, 5'd4, 3'b000, 5'd26, 7'b1100111}, {7'b0100000, 5'd4, 5'd26, 3'b000, 5'd26, 7'b0110011}, {12'b111111110001, 5'd26, 3'b000, 5'd26, 7'b0010011}, {7'b0000000, 5'd1, 5'd2, 3'b010, 5'b00001, 7'b0100011}, {12'b1, 5'd2, 3'b010, 5'd27, 7'b0000011}, {12'b10100, 5'd27, 3'b100, 5'd27, 7'b0010011}, {12'b1, 5'd0, 3'b000, 5'd28, 7'b0010011}, {12'b1, 5'd0, 3'b000, 5'd29, 7'b0010011}, {12'b1, 5'd0, 3'b000, 5'd30, 7'b0010011}, {1'b0, 10'b0000000000, 1'b0, 8'b00000000, 5'd0, 7'b1101111}};

   //---------------------------------------------------------------------------------
   // /====================\
   // | Sum 1 to 9 Program |
   // \====================/
   //
   // Program to test RV32I
   // Add 1,2,3,...,9 (in that order).
   //
   // Regs:
   //  x12 (a2): 10
   //  x13 (a3): 1..10
   //  x14 (a4): Sum
   // 
   //m4_asm(ADDI, x14, x0, 0)             // Initialize sum register a4 with 0
   //m4_asm(ADDI, x12, x0, 1010)          // Store count of 10 in register a2.
   //m4_asm(ADDI, x13, x0, 1)             // Initialize loop count register a3 with 0
   // Loop:
   //m4_asm(ADD, x14, x13, x14)           // Incremental summation
   //m4_asm(ADDI, x13, x13, 1)            // Increment loop count by 1
   //m4_asm(BLT, x13, x12, 1111111111000) // If a3 is less than a2, branch to label named <loop>
   // Test result value in x14, and set x31 to reflect pass/fail.
   //m4_asm(ADDI, x30, x14, 111111010100) // Subtract expected value of 44 to set x30 to 1 if and only iff the result is 45 (1 + 2 + ... + 9).
   //m4_asm(BGE, x0, x0, 0) // Done. Jump to itself (infinite loop). (Up to 20-bit signed immediate plus implicit 0 bit (unlike JALR) provides byte address; last immediate bit should also be 0)
   //m4_asm_end()
   //m4_define(['M4_MAX_CYC'], 50)
   //---------------------------------------------------------------------------------



//_\SV
   module top(input wire clk, input wire reset, input wire [31:0] cyc_cnt, output wire passed, output wire failed);    /* verilator lint_save */ /* verilator lint_off UNOPTFLAT */  bit [256:0] RW_rand_raw; bit [256+63:0] RW_rand_vect; pseudo_rand #(.WIDTH(257)) pseudo_rand (clk, reset, RW_rand_raw[256:0]); assign RW_rand_vect[256+63:0] = {RW_rand_raw[62:0], RW_rand_raw};  /* verilator lint_restore */  /* verilator lint_off WIDTH */ /* verilator lint_off UNOPTFLAT */   // (Expanded in Nav-TLV pane.)
   /* verilator lint_on WIDTH */
`include "mytop_gen.sv" //_\TLV
   
   assign L0_reset_a0 = reset;
   
   //code
   
   //PROGRAM COUNTER 
   assign L0_pc_a0[31:0] = L0_next_pc_a1[31:0];
   assign L0_next_pc_a0[31:0] =  L0_reset_a0    ? '0           :
                     L0_taken_br_a0 ? L0_br_tgt_pc_a0   :
                     L0_is_jal_a0   ? L0_br_tgt_pc_a0   :
                     L0_is_jalr_a0  ? L0_jalr_tgt_pc_a0 :
                     L0_pc_a0 + 32'd4 ;
   
   //INSTRUCTION MEMORY - macro for using the instruction memory, physically this will be an SRAM
   `READONLY_MEM(L0_pc_a0, L0_instr_a0[31:0])
   
   //DECODE LOGIC
   //INSTRUCTION TYPE - determining the instruction type from the 7 bit op code - last two bits are always 11 for valid rv32i instruction so we see only from 6:2
   assign L0_is_u_instr_a0 = L0_instr_a0[6:2] ==? 5'b0x101;
   assign L0_is_r_instr_a0 = L0_instr_a0[6:2] ==? 5'b01011 ||
                    L0_instr_a0[6:2] ==? 5'b011x0 ||
                        L0_instr_a0[6:2] ==? 5'b10100;
   assign L0_is_i_instr_a0 =  L0_instr_a0[6:2] ==? 5'b0000x ||
                      L0_instr_a0[6:2] ==? 5'b001x0 ||
                          L0_instr_a0[6:2] ==? 5'b11001;
   assign L0_is_s_instr_a0 =  L0_instr_a0[6:2] ==? 5'b0100x;
   assign L0_is_b_instr_a0 =  L0_instr_a0[6:2] ==? 5'b11000;
   assign L0_is_j_instr_a0 =  L0_instr_a0[6:2] ==? 5'b11011;
   
   //INSTRUCTION FIELDS - extracting the instruction fields from the entire 32 bit word from the instruction memory
   assign L0_rd_a0[4:0] = L0_instr_a0[11:7];
   assign L0_funct3_a0[2:0] = L0_instr_a0[14:12];
   assign L0_rs1_a0[4:0] = L0_instr_a0[19:15];
   assign L0_rs2_a0[4:0] = L0_instr_a0[24:20];
   assign L0_funct7_a0[6:0] = L0_instr_a0[31:25];
   assign L0_opcode_a0[6:0] = L0_instr_a0[6:0];
   //immediate value extraction at the last
   //checking for the validity of the instruction fields. since only certain types of instructions have certain fields
   //so we or the is_x_instr s and assign to the $field_valid , when $field_valid is 1 then the field is valid and it must be interpreted, if its 0 which means that we neednt consider that
   //opcode is always valid
   //rd is valid for only r,i,u,j
   assign L0_rd_valid_a0 = L0_is_r_instr_a0 || L0_is_i_instr_a0 || L0_is_u_instr_a0 || L0_is_j_instr_a0;
   //funct3 is valid only for r,i, s, b
   assign L0_funct3_valid_a0  =  L0_is_r_instr_a0 || L0_is_i_instr_a0 || L0_is_s_instr_a0 || L0_is_b_instr_a0;
   //rs1 is valid only for r,i,s,b, so whenever funct3 is valid rs1 is valid
   //$rs1_valid = $funct3;
   assign L0_rs1_valid_a0     =  L0_is_r_instr_a0 || L0_is_i_instr_a0 || L0_is_s_instr_a0 || L0_is_b_instr_a0;
   //rs2 is valid only for r,s,b;
   assign L0_rs2_valid_a0 = L0_is_r_instr_a0 || L0_is_s_instr_a0 || L0_is_b_instr_a0 ;
   //funct7 is valid only for r type
   assign L0_funct7_valid_a0 = L0_is_r_instr_a0;
   //immediate is valid for i,b,u,j
   assign L0_imm_valid_a0 = L0_is_i_instr_a0 || L0_is_s_instr_a0 || L0_is_b_instr_a0 || L0_is_u_instr_a0 || L0_is_j_instr_a0 ;
   //supress the unassigned but used warning logs from sandpiper
   `BOGUS_USE(L0_funct7_valid_a0 L0_funct3_valid_a0 L0_rs1_valid_a0 L0_rs2_valid_a0 L0_rd_valid_a0 L0_imm_valid_a0)
   //immediate value extraction - refer RISC_V spec for the explanation
   assign L0_imm_a0[31:0]  =  L0_is_i_instr_a0 ?  {{21{L0_instr_a0[31]}}, L0_instr_a0[30:20]}                                  :
                  L0_is_s_instr_a0 ?  {{21{L0_instr_a0[31]}}, L0_instr_a0[30:25], L0_instr_a0[11:7]}                    :
                  L0_is_b_instr_a0 ?  {{20{L0_instr_a0[31]}}, L0_instr_a0[7], L0_instr_a0[30:25], L0_instr_a0[11:8], 1'b0}   :
                  L0_is_u_instr_a0 ?  {L0_instr_a0[31:12], 12'b0}                                             :
                  L0_is_j_instr_a0 ?  {{12{L0_instr_a0[31]}}, L0_instr_a0[19:12], L0_instr_a0[20], L0_instr_a0[30:21], 1'b0} :
                                 32'b0 ;
   //we need to determine the specific instruction. This is determined from the opcode, funct7[5], and funct3 fields
   //concatinating the three fields for convenience
   assign L0_dec_bits_a0[10:0] = {L0_funct7_a0[5],L0_funct3_a0,L0_opcode_a0};
   assign L0_is_beq_a0 = L0_dec_bits_a0 ==? 11'bx0001100011;
   assign L0_is_bne_a0 = L0_dec_bits_a0 ==? 11'bx0011100011;
   assign L0_is_blt_a0 = L0_dec_bits_a0 ==? 11'bx1001100011;
   assign L0_is_bge_a0 = L0_dec_bits_a0 ==? 11'bx1011100011;
   assign L0_is_bltu_a0 = L0_dec_bits_a0 ==? 11'bx_110_1100011;
   assign L0_is_bgeu_a0 = L0_dec_bits_a0 ==? 11'bx_111_1100011;
   assign L0_is_addi_a0 = L0_dec_bits_a0 ==? 11'bx_000_0010011;
   assign L0_is_add_a0  = L0_dec_bits_a0 ==? 11'b0_000_0110011;
   assign L0_is_lui_a0 = L0_dec_bits_a0 ==? 11'bx_xxx_0110111;
   assign L0_is_auipc_a0 = L0_dec_bits_a0 ==? 11'bx_xxx_0010111;
   assign L0_is_jal_a0 = L0_dec_bits_a0 ==? 11'bxxxx1101111;
   assign L0_is_jalr_a0 = L0_dec_bits_a0 ==? 11'bx0001100111;
   assign L0_is_slti_a0 = L0_dec_bits_a0 ==? 11'bx0100010011;
   assign L0_is_sltiu_a0 = L0_dec_bits_a0 ==? 11'bx0110010011;
   assign L0_is_xori_a0 = L0_dec_bits_a0 ==? 11'bx1000010011;
   assign L0_is_ori_a0 = L0_dec_bits_a0 ==? 11'bx1100010011;
   assign L0_is_andi_a0 = L0_dec_bits_a0 ==? 11'bx1110010011;
   assign L0_is_slli_a0 = L0_dec_bits_a0 ==? 11'b00010010011;
   assign L0_is_srli_a0 = L0_dec_bits_a0 ==? 11'b01010010011;
   assign L0_is_srai_a0 = L0_dec_bits_a0 ==? 11'b11010010011;
   assign L0_is_sub_a0 = L0_dec_bits_a0 ==? 11'b10000110011;
   assign L0_is_sll_a0 = L0_dec_bits_a0 ==? 11'b00010110011;
   assign L0_is_slt_a0 = L0_dec_bits_a0 ==? 11'b00100110011;
   assign L0_is_sltu_a0 = L0_dec_bits_a0 ==? 11'b00110110011;
   assign L0_is_xor_a0 = L0_dec_bits_a0 ==? 11'b01000110011;
   assign L0_is_srl_a0 = L0_dec_bits_a0 ==? 11'b1010110011;
   assign L0_is_sra_a0 = L0_dec_bits_a0 ==? 11'b11010110011;
   assign L0_is_or_a0 = L0_dec_bits_a0 ==? 11'b01100110011;
   assign L0_is_and_a0 = L0_dec_bits_a0 ==? 11'b01110110011;
   assign L0_is_load_a0    =  L0_opcode_a0   ==  7'b0000011 ;       ;
   //Our implementation will treat all loads and all stores the same, so assign $is_load based on opcode only. $is_s_instr already identifies stores, so we do not need any additional decode logic for stores.
   `BOGUS_USE(L0_is_beq_a0 L0_is_bne_a0 L0_is_blt_a0 L0_is_bge_a0 L0_is_bltu_a0 L0_is_bgeu_a0 L0_is_addi_a0 L0_is_add_a0 L0_is_lui_a0 L0_is_auipc_a0 L0_is_jal_a0 L0_is_jalr_a0 L0_is_slti_a0 L0_is_sltiu_a0 L0_is_xori_a0 L0_is_ori_a0 L0_is_andi_a0 L0_is_slli_a0 L0_is_srli_a0 L0_is_srai_a0 L0_is_sub_a0 L0_is_sll_a0 L0_is_slt_a0 L0_is_sltu_a0 L0_is_xor_a0 L0_is_srl_a0 L0_is_sra_a0 L0_is_or_a0 L0_is_and_a0 L0_is_load_a0)
   
   //Register File 
   
   
   //ALU
   //sub expressions which are often used in the evaluation of other instructions
   //SLTU and SLTIU Set if Less than (Immediate) Unsigned
   assign L0_sltu_rslt_a0[31:0] = {31'b0,L0_src1_value_a0 < L0_src2_value_a0}; //set less than compares sets 1 if rs1<rs2 else 0 when rs1 and rs2 are compared as unsigned
   assign L0_sltiu_rslt_a0[31:0] = {31'b0, L0_src1_value_a0 < L0_imm_a0};//set less than immediate unsigned is same as sltu where rs2 is an immediate value
   //SRA AND SRAI , shift right arithmetic and shift right arithmetic immediate
   //this is arithmetic shift, unlike normal shift here the bits are shifted one bit right, old LSB is discarded and the new MSB is the Old MSB
   //calculate the sign extended src1 ==> pad with the MSB of SRC1 - 32 times MSB of src1
   assign L0_sext_rslt_a0[63:0] = {{32{L0_src1_value_a0[31]}},L0_src1_value_a0};
   //64 bit signed extended results to be truncated
   assign L0_sra_rslt_a0[63:0] = L0_sext_rslt_a0 >> L0_src2_value_a0[4:0]; //arithmetic right shift to the amount specified in src2
   assign L0_srai_rslt_a0[63:0] = L0_sext_rslt_a0 >> L0_imm_a0[4:0];
   assign L0_result_a0[31:0] =  L0_is_addi_a0 || L0_is_load_a0 || L0_is_s_instr_a0 ?  L0_src1_value_a0 + L0_imm_a0 :
                    L0_is_add_a0  ?  L0_src1_value_a0 + L0_src2_value_a0 :
                    L0_is_andi_a0 ?  L0_src1_value_a0 & L0_imm_a0:
                    L0_is_ori_a0  ?  L0_src1_value_a0 | L0_imm_a0:
                    L0_is_xori_a0 ?  L0_src1_value_a0 ^ L0_imm_a0:
                    L0_is_slli_a0 ?  L0_src1_value_a0 << L0_imm_a0[5:0]:
                    L0_is_srli_a0 ?  L0_src1_value_a0 >> L0_imm_a0[5:0]:
                    L0_is_and_a0  ?  L0_src1_value_a0 & L0_src2_value_a0:
                    L0_is_or_a0   ?  L0_src1_value_a0 | L0_src2_value_a0:
                    L0_is_xor_a0  ?  L0_src1_value_a0 ^ L0_src2_value_a0:
                    L0_is_sub_a0  ?  L0_src1_value_a0 - L0_src2_value_a0:
                    L0_is_sll_a0  ?  L0_src1_value_a0 << L0_src2_value_a0:
                    L0_is_srl_a0  ?  L0_src1_value_a0 >> L0_src2_value_a0:
                    L0_is_sltu_a0 ? L0_sltu_rslt_a0:
                    L0_is_sltiu_a0 ? L0_sltiu_rslt_a0:
                    L0_is_lui_a0  ?  {L0_imm_a0[31:12], 12'b0}:
                    L0_is_auipc_a0 ? L0_pc_a0 + L0_imm_a0:
                    L0_is_jal_a0  ?  L0_pc_a0 + 32'd4: //jump and link this is used to jump to a destination but before that the original pc+4 which is the next instruction that has to be repeated when the jump hasnt called is also captured in a destination register so that after the jal is over it can resume to the normal execution of the program
                    L0_is_jalr_a0 ?  L0_pc_a0 + 32'd4: 
                    L0_is_slt_a0  ?  ((L0_src1_value_a0[31] == L0_src2_value_a0[31]) ? L0_sltu_rslt_a0 : {31'b0,L0_src1_value_a0[31]}):
                    L0_is_slti_a0 ?  ((L0_src1_value_a0[31] == L0_imm_a0[31]) ? L0_sltiu_rslt_a0 : {31'b0,L0_src1_value_a0[31]}):
                    L0_is_sra_a0  ? L0_sra_rslt_a0[31:0]: //here we take only the 32 bits from the 64 bits
                    L0_is_srai_a0 ? L0_srai_rslt_a0[31:0]:
                              32'bx;
   
   //Branch Logic
   assign L0_taken_br_a0   =  L0_is_beq_a0  ?  (L0_src1_value_a0 == L0_src2_value_a0) :  //taken branch is like a switch only when the branch statements happen the branch will occur and it will jump to pc+imm location as the location is specified in the imm field of the instruction itself
                  L0_is_bne_a0  ?  (L0_src1_value_a0 != L0_src2_value_a0) :
                  L0_is_blt_a0  ?  ((L0_src1_value_a0 < L0_src2_value_a0)  ^ (L0_src1_value_a0[31] != L0_src2_value_a0[31])) : //here we use xor since if they are equal we dont want them under the same category but there are separate instructions
                  L0_is_bge_a0  ?  ((L0_src1_value_a0 >= L0_src2_value_a0) ^ (L0_src1_value_a0[31] != L0_src2_value_a0[31])) :
                  L0_is_bltu_a0 ?  (L0_src1_value_a0 < L0_src2_value_a0)  :
                  L0_is_bgeu_a0 ?  (L0_src1_value_a0 >= L0_src2_value_a0) :
                              1'b0;
   
   assign L0_br_tgt_pc_a0[31:0]  =  L0_pc_a0 + L0_imm_a0;
   assign L0_jalr_tgt_pc_a0[31:0] = L0_src1_value_a0 + L0_imm_a0;
   
   
   // Assert these to end simulation (before Makerchip cycle limit).
   `line 727 "/raw.githubusercontent.com/stevehoover/LFBuildingaRISCVCPUCore/main/lib/riscvshelllib.tlv" 1   // Instantiated from top.tlv, 195 as: m4+tb() // to verify if the simulation passes for 1+2+3+..9=45
      assign L0_passed_cond_a0 = (Xreg_value_a0[30] == 32'b1) &&
                     (! L0_reset_a0 && L0_next_pc_a0[31:0] == L0_pc_a0[31:0]);
      assign passed = L0_passed_cond_a2;
   //_\end_source // to verify if the simulation passes for 1+2+3+..9=45
   `line 196 "top.tlv" 2
   //*passed = 1'b0;
   assign failed = cyc_cnt > 70;
   //To configure the m4+rf do the register  file read first then simulate and then do ALU then do the register file write
   //rd , rs1, rs2 refer to register destination and register source respectively in the instruction set as well as in the code
   //in the default template for the register file rd refers to read from the register which is rs register select in the main code
   //At RF Read
   //m4+rf(32, 32, $reset, $wr_en, $wr_index[4:0], $wr_data[31:0], $rs1_valid, $rs1, $src1_value[31:0], $rs2_valid, $rs2, $src2_value[31:0])
   //After ALU
   //register x0 is always hardwired to 0 , so we cant write to x0, in order to avoid this we impose a condition on write enable that is
   //the register destination is valid only when rd is not 5'b0 which is x0's address. Thus we can never write to x0
   //after the data memory creation now provide a multiplexer when the load instruction is there the output from the data memory is written to the instruction memory, so here the ?: conditional implements the multiplexer
   `line 125 "/raw.githubusercontent.com/stevehoover/LFBuildingaRISCVCPUCore/main/lib/riscvshelllib.tlv" 1   // Instantiated from top.tlv, 207 as: m4+rf(32, 32, $reset, $rd_valid && ($rd != 5'b0), $rd,  $is_load ? $ld_data : $result, $rs1_valid, $rs1, $src1_value[31:0], $rs2_valid, $rs2, $src2_value[31:0])
      assign L0_rf1_wr_en_a0 = L0_rd_valid_a0 && (L0_rd_a0 != 5'b0);
      assign L0_rf1_wr_index_a0[$clog2(32)-1:0]  = L0_rd_a0;
      assign L0_rf1_wr_data_a0[32-1:0] = L0_is_load_a0 ? L0_ld_data_a0 : L0_result_a0;
      
      assign L0_rf1_rd_en1_a0 = L0_rs1_valid_a0;
      assign L0_rf1_rd_index1_a0[$clog2(32)-1:0] = L0_rs1_a0;
      
      assign L0_rf1_rd_en2_a0 = L0_rs2_valid_a0;
      assign L0_rf1_rd_index2_a0[$clog2(32)-1:0] = L0_rs2_a0;
      
      for (xreg = 0; xreg <= 31; xreg++) begin : L1_Xreg logic L1_wr_a0; //_/xreg
         assign L1_wr_a0 = L0_rf1_wr_en_a0 && (L0_rf1_wr_index_a0 == xreg);
         assign Xreg_value_a0[xreg][32-1:0] = L0_reset_a0 ? xreg              :
                                    L1_wr_a0      ? L0_rf1_wr_data_a0 :
                                               Xreg_value_a1[xreg][32-1:0]; end
      
      assign L0_src1_value_a0[31:0][32-1:0]  =  L0_rf1_rd_en1_a0 ? Xreg_value_a0[L0_rf1_rd_index1_a0] : 'X;
      assign L0_src2_value_a0[31:0][32-1:0]  =  L0_rf1_rd_en2_a0 ? Xreg_value_a0[L0_rf1_rd_index2_a0] : 'X;
      
      //_/xreg
         
            
   //_\end_source
   `line 208 "top.tlv" 2
   //m4+rf(32, 32, $reset, $rd_valid && ($rd != 5'b0), $rd, $result, $rs1_valid, $rs1, $src1_value[31:0], $rs2_valid, $rs2, $src2_value[31:0])
   `line 187 "/raw.githubusercontent.com/stevehoover/LFBuildingaRISCVCPUCore/main/lib/riscvshelllib.tlv" 1   // Instantiated from top.tlv, 209 as: m4+dmem(32, 32, $reset, $result[6:2], $is_s_instr, $src2_value, $is_load, $ld_data[31:0])
      // Allow expressions for most inputs, so define input signals.
      assign L0_dmem1_wr_en_a0 = L0_is_s_instr_a0;
      assign L0_dmem1_addr_a0[$clog2(32)-1:0] = L0_result_a0[6:2];
      assign L0_dmem1_wr_data_a0[32-1:0] = L0_src2_value_a0;
      
      assign L0_dmem1_rd_en_a0 = L0_is_load_a0;
      
      for (dmem = 0; dmem <= 31; dmem++) begin : L1_Dmem logic L1_wr_a0; //_/dmem
         assign L1_wr_a0 = L0_dmem1_wr_en_a0 && (L0_dmem1_addr_a0 == dmem);
         assign Dmem_value_a0[dmem][32-1:0] = L0_reset_a0 ? 0                 :
                                 L1_wr_a0         ? L0_dmem1_wr_data_a0 :
                                               Dmem_value_a1[dmem][32-1:0]; end
      
      assign L0_ld_data_a0[31:0][32-1:0] = L0_dmem1_rd_en_a0 ? Dmem_value_a0[L0_dmem1_addr_a0] : 'X;
      //_/dmem
         
   //_\end_source
   `line 210 "top.tlv" 2
   `line 239 "/raw.githubusercontent.com/stevehoover/LFBuildingaRISCVCPUCore/main/lib/riscvshelllib.tlv" 1   // Instantiated from top.tlv, 210 as: m4+cpu_viz()
      // String representations of the instructions for debug.
      /*SV_plus*/
         // A default signal for ones that are not found.
         logic sticky_zero;
         assign sticky_zero = 0;
         // Instruction strings from the assembler.
         logic [40*8-1:0] instr_strs [0:58];
         assign instr_strs = '{ "(I) ADDI x1,x0,10101                    ",  "(I) ADDI x2,x0,111                      ",  "(I) ADDI x3,x0,111111111100             ",  "(I) ANDI x5,x1,1011100                  ",  "(I) XORI x5,x5,10101                    ",  "(I) ORI x6,x1,1011100                   ",  "(I) XORI x6,x6,1011100                  ",  "(I) ADDI x7,x1,111                      ",  "(I) XORI x7,x7,11101                    ",  "(I) SLLI x8,x1,110                      ",  "(I) XORI x8,x8,10101000001              ",  "(I) SRLI x9,x1,10                       ",  "(I) XORI x9,x9,100                      ",  "(R) AND r10,x1,x2                       ",  "(I) XORI x10,x10,100                    ",  "(R) OR x11,x1,x2                        ",  "(I) XORI x11,x11,10110                  ",  "(R) XOR x12,x1,x2                       ",  "(I) XORI x12,x12,10011                  ",  "(R) ADD x13,x1,x2                       ",  "(I) XORI x13,x13,11101                  ",  "(R) SUB x14,x1,x2                       ",  "(I) XORI x14,x14,1111                   ",  "(R) SLL x15,x2,x2                       ",  "(I) XORI x15,x15,1110000001             ",  "(R) SRL x16,x1,x2                       ",  "(I) XORI x16,x16,1                      ",  "(R) SLTU x17,x2,x1                      ",  "(I) XORI x17,x17,0                      ",  "(I) SLTIU x18,x2,10101                  ",  "(I) XORI x18,x18,0                      ",  "(U) LUI x19,0                           ",  "(I) XORI x19,x19,1                      ",  "(I) SRAI x20,x3,1                       ",  "(I) XORI x20,x20,111111111111           ",  "(R) SLT x21,x3,x1                       ",  "(I) XORI x21,x21,0                      ",  "(I) SLTI x22,x3,1                       ",  "(I) XORI x22,x22,0                      ",  "(R) SRA x23,x1,x2                       ",  "(I) XORI x23,x23,1                      ",  "(U) AUIPC x4,100                        ",  "(I) SRLI x24,x4,111                     ",  "(I) XORI x24,x24,10000000               ",  "(J) JAL x25,10                          ",  "(U) AUIPC x4,0                          ",  "(R) XOR x25,x25,x4                      ",  "(I) XORI x25,x25,1                      ",  "(I) JALR x26,x4,10000                   ",  "(R) SUB x26,x26,x4                      ",  "(I) ADDI x26,x26,111111110001           ",  "(S) SW x2,x1,1                          ",  "(I) LW x27,x2,1                         ",  "(I) XORI x27,x27,10100                  ",  "(I) ADDI x28,x0,1                       ",  "(I) ADDI x29,x0,1                       ",  "(I) ADDI x30,x0,1                       ",  "(J) JAL x0,0                            ",  "END                                     "};
      
      //_/cpuviz
         
         
         //_/imem
            
         
   endgenerate //_\end_source
   `line 211 "top.tlv" 2
//_\SV
   endmodule
